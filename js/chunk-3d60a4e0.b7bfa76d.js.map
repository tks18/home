{"version":3,"sources":["webpack:///../../../src/components/VSlideGroup/VSlideGroup.ts","webpack:///../../../../src/components/VSparkline/helpers/core.ts","webpack:///../../../../src/components/VSparkline/helpers/math.ts","webpack:///../../../../src/components/VSparkline/helpers/path.ts","webpack:///../../../src/components/VSparkline/VSparkline.ts","webpack:///../../../src/components/VChipGroup/VChipGroup.ts"],"names":["BaseSlideGroup","name","directives","Resize","Touch","props","activeClass","type","default","centerActive","nextIcon","prevIcon","showArrows","Boolean","validator","v","data","internalItemsLength","isOverflowing","resizeTimeout","startX","isSwipingHorizontal","isSwiping","scrollOffset","widths","content","wrapper","computed","canTouch","window","__cachedNext","this","genTransition","__cachedPrev","classes","hasAffixes","Math","isMobile","hasNext","hasPrev","watch","internalValue","beforeUpdate","$children","updated","methods","genNext","slot","$scopedSlots","next","$slots","$createElement","staticClass","class","on","click","key","genContent","ref","genData","value","onResize","genIcon","icon","$vuetify","rtl","location","upperLocation","hasAffix","disabled","genPrev","prev","genWrapper","start","e","move","end","calculateNewOffset","sign","newAbosluteOffset","direction","onAffixClick","onTouchStart","onTouchMove","diffX","diffY","document","onTouchEnd","maxScrollOffset","overflowCheck","fn","scrollIntoView","items","lastItemPosition","length","wrapperPosition","$refs","selectedIndex","calculateCenteredOffset","selectedItem","calculateUpdatedOffset","clientWidth","selectedElement","offsetLeft","currentScrollOffset","totalWidth","itemOffset","additionalOffset","offsetCentered","scrollTo","setWidths","render","h","provide","slideGroup","maxY","totalValues","values","maxValue","minValue","gridX","maxX","gridY","x","minX","index","y","horizonY","height","parseInt","p0","p2","p1","vector","to","from","unitVector","radius","fill","points","isCollinear","checkCollinear","point","threshold","getDistance","isTooCloseForRadius","radiusForPoint","before","moveTo","after","mixins","inheritAttrs","autoDraw","autoDrawDuration","autoDrawEasing","autoLineWidth","color","gradient","gradientDirection","val","includes","String","labels","labelSize","Number","lineWidth","padding","showLabels","smooth","width","lastLength","parsedPadding","parsedWidth","parsedHeight","parsedLabelSize","totalHeight","_lineWidth","totalPadding","parseFloat","boundary","minY","hasLabels","parsedLabels","len","i","item","normalizedValues","map","_values","genPoints","textY","_radius","immediate","handler","path","genGradient","stops","attrs","offset","id","gradientUnits","x1","y1","x2","y2","genG","style","fontSize","textAnchor","dominantBaseline","genPath","d","stroke","_uid","genLabels","children","genLabel","label","genBars","bars","offsetX","display","viewBox","genClipPath","rounding","rx","ry","attributeName","dur","genTrend","setTextColor","chipGroup","column"],"mappings":"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","file":"js/chunk-3d60a4e0.b7bfa76d.js","sourcesContent":["// Styles\nimport './VSlideGroup.sass'\n\n// Components\nimport VIcon from '../VIcon'\nimport { VFadeTransition } from '../transitions'\n\n// Extensions\nimport { BaseItemGroup } from '../VItemGroup/VItemGroup'\n\n// Mixins\nimport Mobile from '../../mixins/mobile'\n\n// Directives\nimport Resize from '../../directives/resize'\nimport Touch from '../../directives/touch'\n\n// Utilities\nimport mixins, { ExtractVue } from '../../util/mixins'\n\n// Types\nimport Vue, { VNode } from 'vue'\n\ninterface TouchEvent {\n  touchstartX: number\n  touchstartY: number\n  touchmoveX: number\n  touchmoveY: number\n  stopPropagation: Function\n}\n\ninterface Widths {\n  content: number\n  wrapper: number\n}\n\ninterface options extends Vue {\n  $refs: {\n    content: HTMLElement\n    wrapper: HTMLElement\n  }\n}\n\nexport const BaseSlideGroup = mixins<options &\n/* eslint-disable indent */\n  ExtractVue<[\n    typeof BaseItemGroup,\n    typeof Mobile,\n  ]>\n/* eslint-enable indent */\n>(\n  BaseItemGroup,\n  Mobile,\n  /* @vue/component */\n).extend({\n  name: 'base-slide-group',\n\n  directives: {\n    Resize,\n    Touch,\n  },\n\n  props: {\n    activeClass: {\n      type: String,\n      default: 'v-slide-item--active',\n    },\n    centerActive: Boolean,\n    nextIcon: {\n      type: String,\n      default: '$next',\n    },\n    prevIcon: {\n      type: String,\n      default: '$prev',\n    },\n    showArrows: {\n      type: [Boolean, String],\n      validator: v => (\n        typeof v === 'boolean' || [\n          'always',\n          'desktop',\n          'mobile',\n        ].includes(v)\n      ),\n    },\n  },\n\n  data: () => ({\n    internalItemsLength: 0,\n    isOverflowing: false,\n    resizeTimeout: 0,\n    startX: 0,\n    isSwipingHorizontal: false,\n    isSwiping: false,\n    scrollOffset: 0,\n    widths: {\n      content: 0,\n      wrapper: 0,\n    },\n  }),\n\n  computed: {\n    canTouch (): boolean {\n      return typeof window !== 'undefined'\n    },\n    __cachedNext (): VNode {\n      return this.genTransition('next')\n    },\n    __cachedPrev (): VNode {\n      return this.genTransition('prev')\n    },\n    classes (): object {\n      return {\n        ...BaseItemGroup.options.computed.classes.call(this),\n        'v-slide-group': true,\n        'v-slide-group--has-affixes': this.hasAffixes,\n        'v-slide-group--is-overflowing': this.isOverflowing,\n      }\n    },\n    hasAffixes (): Boolean {\n      switch (this.showArrows) {\n        // Always show arrows on desktop & mobile\n        case 'always': return true\n\n        // Always show arrows on desktop\n        case 'desktop': return !this.isMobile\n\n        // Show arrows on mobile when overflowing.\n        // This matches the default 2.2 behavior\n        case true: return this.isOverflowing || Math.abs(this.scrollOffset) > 0\n\n        // Always show on mobile\n        case 'mobile': return (\n          this.isMobile ||\n          (this.isOverflowing || Math.abs(this.scrollOffset) > 0)\n        )\n\n        // https://material.io/components/tabs#scrollable-tabs\n        // Always show arrows when\n        // overflowed on desktop\n        default: return (\n          !this.isMobile &&\n          (this.isOverflowing || Math.abs(this.scrollOffset) > 0)\n        )\n      }\n    },\n    hasNext (): boolean {\n      if (!this.hasAffixes) return false\n\n      const { content, wrapper } = this.widths\n\n      // Check one scroll ahead to know the width of right-most item\n      return content > Math.abs(this.scrollOffset) + wrapper\n    },\n    hasPrev (): boolean {\n      return this.hasAffixes && this.scrollOffset !== 0\n    },\n  },\n\n  watch: {\n    internalValue: 'setWidths',\n    // When overflow changes, the arrows alter\n    // the widths of the content and wrapper\n    // and need to be recalculated\n    isOverflowing: 'setWidths',\n    scrollOffset (val) {\n      this.$refs.content.style.transform = `translateX(${-val}px)`\n    },\n  },\n\n  beforeUpdate () {\n    this.internalItemsLength = (this.$children || []).length\n  },\n\n  updated () {\n    if (this.internalItemsLength === (this.$children || []).length) return\n    this.setWidths()\n  },\n\n  methods: {\n    // Always generate next for scrollable hint\n    genNext (): VNode | null {\n      const slot = this.$scopedSlots.next\n        ? this.$scopedSlots.next({})\n        : this.$slots.next || this.__cachedNext\n\n      return this.$createElement('div', {\n        staticClass: 'v-slide-group__next',\n        class: {\n          'v-slide-group__next--disabled': !this.hasNext,\n        },\n        on: {\n          click: () => this.onAffixClick('next'),\n        },\n        key: 'next',\n      }, [slot])\n    },\n    genContent (): VNode {\n      return this.$createElement('div', {\n        staticClass: 'v-slide-group__content',\n        ref: 'content',\n      }, this.$slots.default)\n    },\n    genData (): object {\n      return {\n        class: this.classes,\n        directives: [{\n          name: 'resize',\n          value: this.onResize,\n        }],\n      }\n    },\n    genIcon (location: 'prev' | 'next'): VNode | null {\n      let icon = location\n\n      if (this.$vuetify.rtl && location === 'prev') {\n        icon = 'next'\n      } else if (this.$vuetify.rtl && location === 'next') {\n        icon = 'prev'\n      }\n\n      const upperLocation = `${location[0].toUpperCase()}${location.slice(1)}`\n      const hasAffix = (this as any)[`has${upperLocation}`]\n\n      if (\n        !this.showArrows &&\n        !hasAffix\n      ) return null\n\n      return this.$createElement(VIcon, {\n        props: {\n          disabled: !hasAffix,\n        },\n      }, (this as any)[`${icon}Icon`])\n    },\n    // Always generate prev for scrollable hint\n    genPrev (): VNode | null {\n      const slot = this.$scopedSlots.prev\n        ? this.$scopedSlots.prev({})\n        : this.$slots.prev || this.__cachedPrev\n\n      return this.$createElement('div', {\n        staticClass: 'v-slide-group__prev',\n        class: {\n          'v-slide-group__prev--disabled': !this.hasPrev,\n        },\n        on: {\n          click: () => this.onAffixClick('prev'),\n        },\n        key: 'prev',\n      }, [slot])\n    },\n    genTransition (location: 'prev' | 'next') {\n      return this.$createElement(VFadeTransition, [this.genIcon(location)])\n    },\n    genWrapper (): VNode {\n      return this.$createElement('div', {\n        staticClass: 'v-slide-group__wrapper',\n        directives: [{\n          name: 'touch',\n          value: {\n            start: (e: TouchEvent) => this.overflowCheck(e, this.onTouchStart),\n            move: (e: TouchEvent) => this.overflowCheck(e, this.onTouchMove),\n            end: (e: TouchEvent) => this.overflowCheck(e, this.onTouchEnd),\n          },\n        }],\n        ref: 'wrapper',\n      }, [this.genContent()])\n    },\n    calculateNewOffset (direction: 'prev' | 'next', widths: Widths, rtl: boolean, currentScrollOffset: number) {\n      const sign = rtl ? -1 : 1\n      const newAbosluteOffset = sign * currentScrollOffset +\n        (direction === 'prev' ? -1 : 1) * widths.wrapper\n\n      return sign * Math.max(Math.min(newAbosluteOffset, widths.content - widths.wrapper), 0)\n    },\n    onAffixClick (location: 'prev' | 'next') {\n      this.$emit(`click:${location}`)\n      this.scrollTo(location)\n    },\n    onResize () {\n      /* istanbul ignore next */\n      if (this._isDestroyed) return\n\n      this.setWidths()\n    },\n    onTouchStart (e: TouchEvent) {\n      const { content } = this.$refs\n\n      this.startX = this.scrollOffset + e.touchstartX as number\n\n      content.style.setProperty('transition', 'none')\n      content.style.setProperty('willChange', 'transform')\n    },\n    onTouchMove (e: TouchEvent) {\n      if (!this.canTouch) return\n\n      if (!this.isSwiping) {\n        // only calculate disableSwipeHorizontal during the first onTouchMove invoke\n        // in order to ensure disableSwipeHorizontal value is consistent between onTouchStart and onTouchEnd\n        const diffX = e.touchmoveX - e.touchstartX\n        const diffY = e.touchmoveY - e.touchstartY\n        this.isSwipingHorizontal = Math.abs(diffX) > Math.abs(diffY)\n        this.isSwiping = true\n      }\n\n      if (this.isSwipingHorizontal) {\n        // sliding horizontally\n        this.scrollOffset = this.startX - e.touchmoveX\n        // temporarily disable window vertical scrolling\n        document.documentElement.style.overflowY = 'hidden'\n      }\n    },\n    onTouchEnd () {\n      if (!this.canTouch) return\n\n      const { content, wrapper } = this.$refs\n      const maxScrollOffset = content.clientWidth - wrapper.clientWidth\n\n      content.style.setProperty('transition', null)\n      content.style.setProperty('willChange', null)\n\n      if (this.$vuetify.rtl) {\n        /* istanbul ignore else */\n        if (this.scrollOffset > 0 || !this.isOverflowing) {\n          this.scrollOffset = 0\n        } else if (this.scrollOffset <= -maxScrollOffset) {\n          this.scrollOffset = -maxScrollOffset\n        }\n      } else {\n        /* istanbul ignore else */\n        if (this.scrollOffset < 0 || !this.isOverflowing) {\n          this.scrollOffset = 0\n        } else if (this.scrollOffset >= maxScrollOffset) {\n          this.scrollOffset = maxScrollOffset\n        }\n      }\n\n      this.isSwiping = false\n      // rollback whole page scrolling to default\n      document.documentElement.style.removeProperty('overflow-y')\n    },\n    overflowCheck (e: TouchEvent, fn: (e: TouchEvent) => void) {\n      e.stopPropagation()\n      this.isOverflowing && fn(e)\n    },\n    scrollIntoView /* istanbul ignore next */ () {\n      if (!this.selectedItem && this.items.length) {\n        const lastItemPosition = this.items[this.items.length - 1].$el.getBoundingClientRect()\n        const wrapperPosition = this.$refs.wrapper.getBoundingClientRect()\n\n        if (\n          (this.$vuetify.rtl && wrapperPosition.right < lastItemPosition.right) ||\n          (!this.$vuetify.rtl && wrapperPosition.left > lastItemPosition.left)\n        ) {\n          this.scrollTo('prev')\n        }\n      }\n\n      if (!this.selectedItem) {\n        return\n      }\n\n      if (\n        this.selectedIndex === 0 ||\n        (!this.centerActive && !this.isOverflowing)\n      ) {\n        this.scrollOffset = 0\n      } else if (this.centerActive) {\n        this.scrollOffset = this.calculateCenteredOffset(\n          this.selectedItem.$el as HTMLElement,\n          this.widths,\n          this.$vuetify.rtl\n        )\n      } else if (this.isOverflowing) {\n        this.scrollOffset = this.calculateUpdatedOffset(\n          this.selectedItem.$el as HTMLElement,\n          this.widths,\n          this.$vuetify.rtl,\n          this.scrollOffset\n        )\n      }\n    },\n    calculateUpdatedOffset (selectedElement: HTMLElement, widths: Widths, rtl: boolean, currentScrollOffset: number): number {\n      const clientWidth = selectedElement.clientWidth\n      const offsetLeft = rtl\n        ? (widths.content - selectedElement.offsetLeft - clientWidth)\n        : selectedElement.offsetLeft\n\n      if (rtl) {\n        currentScrollOffset = -currentScrollOffset\n      }\n\n      const totalWidth = widths.wrapper + currentScrollOffset\n      const itemOffset = clientWidth + offsetLeft\n      const additionalOffset = clientWidth * 0.4\n\n      if (offsetLeft <= currentScrollOffset) {\n        currentScrollOffset = Math.max(offsetLeft - additionalOffset, 0)\n      } else if (totalWidth <= itemOffset) {\n        currentScrollOffset = Math.min(currentScrollOffset - (totalWidth - itemOffset - additionalOffset), widths.content - widths.wrapper)\n      }\n\n      return rtl ? -currentScrollOffset : currentScrollOffset\n    },\n    calculateCenteredOffset (selectedElement: HTMLElement, widths: Widths, rtl: boolean): number {\n      const { offsetLeft, clientWidth } = selectedElement\n\n      if (rtl) {\n        const offsetCentered = widths.content - offsetLeft - clientWidth / 2 - widths.wrapper / 2\n        return -Math.min(widths.content - widths.wrapper, Math.max(0, offsetCentered))\n      } else {\n        const offsetCentered = offsetLeft + clientWidth / 2 - widths.wrapper / 2\n        return Math.min(widths.content - widths.wrapper, Math.max(0, offsetCentered))\n      }\n    },\n    scrollTo /* istanbul ignore next */ (location: 'prev' | 'next') {\n      this.scrollOffset = this.calculateNewOffset(location, {\n        // Force reflow\n        content: this.$refs.content ? this.$refs.content.clientWidth : 0,\n        wrapper: this.$refs.wrapper ? this.$refs.wrapper.clientWidth : 0,\n      }, this.$vuetify.rtl, this.scrollOffset)\n    },\n    setWidths /* istanbul ignore next */  () {\n      window.requestAnimationFrame(() => {\n        const { content, wrapper } = this.$refs\n\n        this.widths = {\n          content: content ? content.clientWidth : 0,\n          wrapper: wrapper ? wrapper.clientWidth : 0,\n        }\n\n        // https://github.com/vuetifyjs/vuetify/issues/13212\n        // We add +1 to the wrappers width to prevent an issue where the `clientWidth`\n        // gets calculated wrongly by the browser if using a different zoom-level.\n        this.isOverflowing = this.widths.wrapper + 1 < this.widths.content\n\n        this.scrollIntoView()\n      })\n    },\n  },\n\n  render (h): VNode {\n    return h('div', this.genData(), [\n      this.genPrev(),\n      this.genWrapper(),\n      this.genNext(),\n    ])\n  },\n})\n\nexport default BaseSlideGroup.extend({\n  name: 'v-slide-group',\n\n  provide (): object {\n    return {\n      slideGroup: this,\n    }\n  },\n})\n","import { Point, Boundary, Bar } from '../VSparkline'\n\nexport function genPoints (\n  values: number[],\n  boundary: Boundary\n): Point[] {\n  const { minX, maxX, minY, maxY } = boundary\n  const totalValues = values.length\n  const maxValue = Math.max(...values)\n  const minValue = Math.min(...values)\n\n  const gridX = (maxX - minX) / (totalValues - 1)\n  const gridY = (maxY - minY) / ((maxValue - minValue) || 1)\n\n  return values.map((value, index) => {\n    return {\n      x: minX + index * gridX,\n      y: maxY - (value - minValue) * gridY,\n      value,\n    }\n  })\n}\n\nexport function genBars (\n  values: number[],\n  boundary: Boundary\n): Bar[] {\n  const { minX, maxX, minY, maxY } = boundary\n  const totalValues = values.length\n  let maxValue = Math.max(...values)\n  let minValue = Math.min(...values)\n\n  if (minValue > 0) minValue = 0\n  if (maxValue < 0) maxValue = 0\n\n  const gridX = maxX / totalValues\n  const gridY = (maxY - minY) / ((maxValue - minValue) || 1)\n  const horizonY = maxY - Math.abs(minValue * gridY)\n\n  return values.map((value, index) => {\n    const height = Math.abs(gridY * value)\n\n    return {\n      x: minX + index * gridX,\n      y: horizonY - height +\n        +(value < 0) * height,\n      height,\n      value,\n    }\n  })\n}\n","import { Point } from '../VSparkline'\n\nfunction int (value: string | number): number {\n  return parseInt(value, 10)\n}\n\n/**\n * https://en.wikipedia.org/wiki/Collinearity\n * x=(x1+x2)/2\n * y=(y1+y2)/2\n */\nexport function checkCollinear (p0: Point, p1: Point, p2: Point): boolean {\n  return int(p0.x + p2.x) === int(2 * p1.x) && int(p0.y + p2.y) === int(2 * p1.y)\n}\n\nexport function getDistance (p1: Point, p2: Point): number {\n  return Math.sqrt(\n    Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2)\n  )\n}\n\nexport function moveTo (to: Point, from: Point, radius: number) {\n  const vector = { x: to.x - from.x, y: to.y - from.y }\n  const length = Math.sqrt((vector.x * vector.x) + (vector.y * vector.y))\n  const unitVector = { x: vector.x / length, y: vector.y / length }\n\n  return {\n    x: from.x + unitVector.x * radius,\n    y: from.y + unitVector.y * radius,\n  }\n}\n","import { Point } from '../VSparkline'\nimport { checkCollinear, getDistance, moveTo } from './math'\n\n/**\n * From https://github.com/unsplash/react-trend/blob/master/src/helpers/DOM.helpers.js#L18\n */\nexport function genPath (points: Point[], radius: number, fill = false, height = 75) {\n  const start = points.shift()!\n  const end = points[points.length - 1]\n\n  return (\n    (fill ? `M${start.x} ${height - start.x + 2} L${start.x} ${start.y}` : `M${start.x} ${start.y}`) +\n    points\n      .map((point, index) => {\n        const next = points[index + 1]\n        const prev = points[index - 1] || start\n        const isCollinear = next && checkCollinear(next, point, prev)\n\n        if (!next || isCollinear) {\n          return `L${point.x} ${point.y}`\n        }\n\n        const threshold = Math.min(\n          getDistance(prev, point),\n          getDistance(next, point)\n        )\n        const isTooCloseForRadius = threshold / 2 < radius\n        const radiusForPoint = isTooCloseForRadius ? threshold / 2 : radius\n\n        const before = moveTo(prev, point, radiusForPoint)\n        const after = moveTo(next, point, radiusForPoint)\n\n        return `L${before.x} ${before.y}S${point.x} ${point.y} ${after.x} ${after.y}`\n      })\n      .join('') +\n    (fill ? `L${end.x} ${height - start.x + 2} Z` : '')\n  )\n}\n","// Mixins\nimport Colorable from '../../mixins/colorable'\n\n// Utilities\nimport mixins, { ExtractVue } from '../../util/mixins'\nimport { genPoints, genBars } from './helpers/core'\nimport { genPath } from './helpers/path'\n\n// Types\nimport Vue, { VNode } from 'vue'\nimport { Prop, PropValidator } from 'vue/types/options'\n\nexport type SparklineItem = number | { value: number }\n\nexport type SparklineText = {\n  x: number\n  value: string\n}\n\nexport interface Boundary {\n  minX: number\n  minY: number\n  maxX: number\n  maxY: number\n}\n\nexport interface Point {\n  x: number\n  y: number\n  value: number\n}\n\nexport interface Bar {\n  x: number\n  y: number\n  height: number\n  value: number\n}\n\ninterface options extends Vue {\n  $refs: {\n    path: SVGPathElement\n  }\n}\n\nexport default mixins<options &\n/* eslint-disable indent */\n  ExtractVue<[\n    typeof Colorable\n  ]>\n/* eslint-enable indent */\n>(\n  Colorable\n).extend({\n  name: 'VSparkline',\n\n  inheritAttrs: false,\n\n  props: {\n    autoDraw: Boolean,\n    autoDrawDuration: {\n      type: Number,\n      default: 2000,\n    },\n    autoDrawEasing: {\n      type: String,\n      default: 'ease',\n    },\n    autoLineWidth: {\n      type: Boolean,\n      default: false,\n    },\n    color: {\n      type: String,\n      default: 'primary',\n    },\n    fill: {\n      type: Boolean,\n      default: false,\n    },\n    gradient: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<string[]>,\n    gradientDirection: {\n      type: String as Prop<'top' | 'bottom' | 'left' | 'right'>,\n      validator: (val: string) => ['top', 'bottom', 'left', 'right'].includes(val),\n      default: 'top',\n    },\n    height: {\n      type: [String, Number],\n      default: 75,\n    },\n    labels: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<SparklineItem[]>,\n    labelSize: {\n      type: [Number, String],\n      default: 7,\n    },\n    lineWidth: {\n      type: [String, Number],\n      default: 4,\n    },\n    padding: {\n      type: [String, Number],\n      default: 8,\n    },\n    showLabels: Boolean,\n    smooth: {\n      type: [Boolean, Number, String],\n      default: false,\n    },\n    type: {\n      type: String as Prop<'trend' | 'bar'>,\n      default: 'trend',\n      validator: (val: string) => ['trend', 'bar'].includes(val),\n    },\n    value: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<SparklineItem[]>,\n    width: {\n      type: [Number, String],\n      default: 300,\n    },\n  },\n\n  data: () => ({\n    lastLength: 0,\n  }),\n\n  computed: {\n    parsedPadding (): number {\n      return Number(this.padding)\n    },\n    parsedWidth (): number {\n      return Number(this.width)\n    },\n    parsedHeight (): number {\n      return parseInt(this.height, 10)\n    },\n    parsedLabelSize (): number {\n      return parseInt(this.labelSize, 10) || 7\n    },\n    totalHeight (): number {\n      let height = this.parsedHeight\n\n      if (this.hasLabels) height += parseInt(this.labelSize, 10) * 1.5\n\n      return height\n    },\n    totalWidth (): number {\n      let width = this.parsedWidth\n      if (this.type === 'bar') width = Math.max(this.value.length * this._lineWidth, width)\n\n      return width\n    },\n    totalValues (): number {\n      return this.value.length\n    },\n    _lineWidth (): number {\n      if (this.autoLineWidth && this.type !== 'trend') {\n        const totalPadding = this.parsedPadding * (this.totalValues + 1)\n        return (this.parsedWidth - totalPadding) / this.totalValues\n      } else {\n        return parseFloat(this.lineWidth) || 4\n      }\n    },\n    boundary (): Boundary {\n      if (this.type === 'bar') return { minX: 0, maxX: this.totalWidth, minY: 0, maxY: this.parsedHeight }\n\n      const padding = this.parsedPadding\n\n      return {\n        minX: padding,\n        maxX: this.totalWidth - padding,\n        minY: padding,\n        maxY: this.parsedHeight - padding,\n      }\n    },\n    hasLabels (): boolean {\n      return Boolean(\n        this.showLabels ||\n        this.labels.length > 0 ||\n        this.$scopedSlots.label\n      )\n    },\n    parsedLabels (): SparklineText[] {\n      const labels = []\n      const points = this._values\n      const len = points.length\n\n      for (let i = 0; labels.length < len; i++) {\n        const item = points[i]\n        let value = this.labels[i]\n\n        if (!value) {\n          value = typeof item === 'object'\n            ? item.value\n            : item\n        }\n\n        labels.push({\n          x: item.x,\n          value: String(value),\n        })\n      }\n\n      return labels\n    },\n    normalizedValues (): number[] {\n      return this.value.map(item => (typeof item === 'number' ? item : item.value))\n    },\n    _values (): Point[] | Bar[] {\n      return this.type === 'trend' ? genPoints(this.normalizedValues, this.boundary) : genBars(this.normalizedValues, this.boundary)\n    },\n    textY (): number {\n      let y = this.parsedHeight\n      if (this.type === 'trend') y -= 4\n      return y\n    },\n    _radius (): number {\n      return this.smooth === true ? 8 : Number(this.smooth)\n    },\n  },\n\n  watch: {\n    value: {\n      immediate: true,\n      handler () {\n        this.$nextTick(() => {\n          if (\n            !this.autoDraw ||\n            this.type === 'bar' ||\n            !this.$refs.path\n          ) return\n\n          const path = this.$refs.path\n          const length = path.getTotalLength()\n\n          if (!this.fill) {\n            path.style.transition = 'none'\n            path.style.strokeDasharray = length + ' ' + length\n            path.style.strokeDashoffset = Math.abs(length - (this.lastLength || 0)).toString()\n            path.getBoundingClientRect()\n            path.style.transition = `stroke-dashoffset ${this.autoDrawDuration}ms ${this.autoDrawEasing}`\n            path.style.strokeDashoffset = '0'\n          } else {\n            path.style.transformOrigin = 'bottom center'\n            path.style.transition = 'none'\n            path.style.transform = `scaleY(0)`\n            path.getBoundingClientRect()\n            path.style.transition = `transform ${this.autoDrawDuration}ms ${this.autoDrawEasing}`\n            path.style.transform = `scaleY(1)`\n          }\n          this.lastLength = length\n        })\n      },\n    },\n  },\n\n  methods: {\n    genGradient () {\n      const gradientDirection = this.gradientDirection\n      const gradient = this.gradient.slice()\n\n      // Pushes empty string to force\n      // a fallback to currentColor\n      if (!gradient.length) gradient.push('')\n\n      const len = Math.max(gradient.length - 1, 1)\n      const stops = gradient.reverse().map((color, index) =>\n        this.$createElement('stop', {\n          attrs: {\n            offset: index / len,\n            'stop-color': color || 'currentColor',\n          },\n        })\n      )\n\n      return this.$createElement('defs', [\n        this.$createElement('linearGradient', {\n          attrs: {\n            id: this._uid,\n            gradientUnits: 'userSpaceOnUse',\n            x1: gradientDirection === 'left' ? '100%' : '0',\n            y1: gradientDirection === 'top' ? '100%' : '0',\n            x2: gradientDirection === 'right' ? '100%' : '0',\n            y2: gradientDirection === 'bottom' ? '100%' : '0',\n          },\n        }, stops),\n      ])\n    },\n    genG (children: VNode[]) {\n      return this.$createElement('g', {\n        style: {\n          fontSize: '8',\n          textAnchor: 'middle',\n          dominantBaseline: 'mathematical',\n          fill: 'currentColor',\n        } as object, // TODO: TS 3.5 is too eager with the array type here\n      }, children)\n    },\n    genPath () {\n      const points = genPoints(this.normalizedValues, this.boundary)\n\n      return this.$createElement('path', {\n        attrs: {\n          d: genPath(points, this._radius, this.fill, this.parsedHeight),\n          fill: this.fill ? `url(#${this._uid})` : 'none',\n          stroke: this.fill ? 'none' : `url(#${this._uid})`,\n        },\n        ref: 'path',\n      })\n    },\n    genLabels (offsetX: number) {\n      const children = this.parsedLabels.map((item, i) => (\n        this.$createElement('text', {\n          attrs: {\n            x: item.x + offsetX + this._lineWidth / 2,\n            y: this.textY + (this.parsedLabelSize * 0.75),\n            'font-size': Number(this.labelSize) || 7,\n          },\n        }, [this.genLabel(item, i)])\n      ))\n\n      return this.genG(children)\n    },\n    genLabel (item: SparklineText, index: number) {\n      return this.$scopedSlots.label\n        ? this.$scopedSlots.label({ index, value: item.value })\n        : item.value\n    },\n    genBars () {\n      if (!this.value || this.totalValues < 2) return undefined as never\n\n      const bars = genBars(this.normalizedValues, this.boundary)\n      const offsetX = (Math.abs(bars[0].x - bars[1].x) - this._lineWidth) / 2\n\n      return this.$createElement('svg', {\n        attrs: {\n          display: 'block',\n          viewBox: `0 0 ${this.totalWidth} ${this.totalHeight}`,\n        },\n      }, [\n        this.genGradient(),\n        this.genClipPath(bars, offsetX, this._lineWidth, 'sparkline-bar-' + this._uid),\n        this.hasLabels ? this.genLabels(offsetX) : undefined as never,\n        this.$createElement('g', {\n          attrs: {\n            'clip-path': `url(#sparkline-bar-${this._uid}-clip)`,\n            fill: `url(#${this._uid})`,\n          },\n        }, [\n          this.$createElement('rect', {\n            attrs: {\n              x: 0,\n              y: 0,\n              width: this.totalWidth,\n              height: this.height,\n            },\n          }),\n        ]),\n      ])\n    },\n    genClipPath (bars: Bar[], offsetX: number, lineWidth: number, id: string) {\n      const rounding = typeof this.smooth === 'number'\n        ? this.smooth\n        : this.smooth ? 2 : 0\n\n      return this.$createElement('clipPath', {\n        attrs: {\n          id: `${id}-clip`,\n        },\n      }, bars.map(item => {\n        return this.$createElement('rect', {\n          attrs: {\n            x: item.x + offsetX,\n            y: item.y,\n            width: lineWidth,\n            height: item.height,\n            rx: rounding,\n            ry: rounding,\n          },\n        }, [\n          this.autoDraw ? this.$createElement('animate', {\n            attrs: {\n              attributeName: 'height',\n              from: 0,\n              to: item.height,\n              dur: `${this.autoDrawDuration}ms`,\n              fill: 'freeze',\n            },\n          }) : undefined as never,\n        ])\n      }))\n    },\n    genTrend () {\n      return this.$createElement('svg', this.setTextColor(this.color, {\n        attrs: {\n          ...this.$attrs,\n          display: 'block',\n          'stroke-width': this._lineWidth || 1,\n          viewBox: `0 0 ${this.width} ${this.totalHeight}`,\n        },\n      }), [\n        this.genGradient(),\n        this.hasLabels && this.genLabels(-(this._lineWidth / 2)),\n        this.genPath(),\n      ])\n    },\n  },\n\n  render (h): VNode {\n    if (this.totalValues < 2) return undefined as never\n\n    return this.type === 'trend' ? this.genTrend() : this.genBars()\n  },\n})\n","// Styles\nimport './VChipGroup.sass'\n\n// Extensions\nimport { BaseSlideGroup } from '../VSlideGroup/VSlideGroup'\n\n// Mixins\nimport Colorable from '../../mixins/colorable'\n\n// Utilities\nimport mixins from '../../util/mixins'\n\n/* @vue/component */\nexport default mixins(\n  BaseSlideGroup,\n  Colorable\n).extend({\n  name: 'v-chip-group',\n\n  provide () {\n    return {\n      chipGroup: this,\n    }\n  },\n\n  props: {\n    column: Boolean,\n  },\n\n  computed: {\n    classes () {\n      return {\n        ...BaseSlideGroup.options.computed.classes.call(this),\n        'v-chip-group': true,\n        'v-chip-group--column': this.column,\n      }\n    },\n  },\n\n  watch: {\n    column (val) {\n      if (val) this.scrollOffset = 0\n\n      this.$nextTick(this.onResize)\n    },\n  },\n\n  methods: {\n    genData () {\n      return this.setTextColor(this.color, {\n        ...BaseSlideGroup.options.methods.genData.call(this),\n      })\n    },\n  },\n})\n"],"sourceRoot":""}